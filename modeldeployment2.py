# -*- coding: utf-8 -*-
"""ModelDeployment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11uc96RxpU8gYY9nZYsIb4jPrzaC9rxgH
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import pickle

class HotelBookingModel:
    def __init__(self, file_path):
        self.file_path = file_path
        self.df = None
        self.scaler = StandardScaler()
        self.model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)

    def load_and_preprocess_data(self):
        self.df = pd.read_csv(self.file_path)
        self.df.drop('Booking_ID', axis=1, inplace=True)
        self.df.drop_duplicates(inplace=True)
        self.df.dropna(inplace=True)

        categorical_cols = self.df.select_dtypes(include=['object']).columns
        for col in categorical_cols:
            le = LabelEncoder()
            self.df[col] = le.fit_transform(self.df[col])

    def split_and_scale_data(self):
        X = self.df.drop('booking_status', axis=1)
        y = self.df['booking_status']
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        X_train_scaled = self.scaler.fit_transform(X_train)
        X_test_scaled = self.scaler.transform(X_test)
        return X_train_scaled, X_test_scaled, y_train, y_test

    def train_model(self, X_train, X_test, y_train, y_test):
        self.model.fit(X_train, y_train)
        y_pred = self.model.predict(X_test)

        acc = accuracy_score(y_test, y_pred)
        print("XGBoost Accuracy:", acc)
        print(confusion_matrix(y_test, y_pred))
        print(classification_report(y_test, y_pred))

if __name__ == "__main__":
    model_pipeline = HotelBookingModel('Dataset_B_hotel.csv')
    model_pipeline.load_and_preprocess_data()
    X_train, X_test, y_train, y_test = model_pipeline.split_and_scale_data()
    model_pipeline.train_model(X_train, X_test, y_train, y_test)